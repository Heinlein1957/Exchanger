import telebot
import multiprocessing
import log
import logging
import time
from telebot import apihelper
from datetime import datetime
from constants import *
from coinbase_api import *
from blockchain_api import get_rates
from utils import create_random_comment, sub_commission, add_commission
from config import bot_token, admin_id, ip, own_qiwi_number
import sql as db
import qiwi
import yandexmoney

bot = telebot.TeleBot(bot_token)


@bot.message_handler(regexp="üîô –û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é")
@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = message.from_user.id
    db.add_user(user_id, message.from_user.username)
    bot.send_message(user_id, menu_message.format(*get_rates()), reply_markup=menu_markup)


@bot.message_handler(commands=['help'])
def help_handler(message):
    user_id = message.from_user.id
    bot.send_message(user_id, help_message + f"\n–ê–¥–º–∏–Ω - {get_config_var('AdminUsername')}")


@bot.message_handler(regexp="(?:^üì•–ö—É–ø–∏—Ç—å|^üì§–ü—Ä–æ–¥–∞—Ç—å) BTC")
def trade_handler(message):
    user_id = message.from_user.id
    action = message.text.split(' ')[0]
    if action == "üì•–ö—É–ø–∏—Ç—å":
        action = "buy"
        payment_text = set_payment_mes + "–ø–æ–∫—É–ø–∫–∏ üî∂ BTC üî∂"
    else:
        action = "send"
        payment_text = set_payment_mes + "–ø—Ä–æ–¥–∞–∂–∏ üî∂ BTC üî∂"
    bot.send_message(user_id, payment_text, reply_markup=payment_markup)
    db.set_state(user_id, {'State': 'set_payment', 'Action': action})


@bot.message_handler(func=lambda message: 'set_payment' in db.get_state(message.from_user.id))
def set_payment(message):
    user_id = message.from_user.id
    try:
        payment = payments[message.text]
        db.set_state(user_id, {'State': 'set_address', 'Payment': payment})
        plus_text = '–≤–∞—à BTC –∞–¥—Ä–µ—Å' if 'buy' in db.get_state(user_id, ['Action']) else address_mes_texts[payment]
        bot.send_message(user_id, set_address_mes + plus_text, reply_markup=back_markup)
    except KeyError:
        bot.send_message(user_id, set_payment_error_mes, reply_markup=payment_markup)


@bot.message_handler(func=lambda message: 'set_address' in db.get_state(message.from_user.id))
def set_address(message):
    user_id = message.from_user.id
    address = message.text
    action, payment = db.get_state(user_id, ['Action', 'Payment'])
    if action == 'buy':
        is_valid = payments_validations['btc'](address)
        substr = '–∞–¥—Ä–µ—Å–∞'
    else:
        is_valid = payments_validations[payment](address)
        substr = '–Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã' if 'card' in payment else '—Å—á–µ—Ç–∞'

    if is_valid:
        db.set_state(user_id, {'State': 'set_amount', 'Address': address})
        bot.send_message(user_id, set_amount_mes, reply_markup=back_markup)
    else:
        bot.send_message(user_id, address_error_mes.format(substr), reply_markup=back_markup)


@bot.message_handler(func=lambda message: 'set_amount' in db.get_state(message.from_user.id))
def set_amount(message):
    user_id = message.from_user.id
    try:
        amount = float(message.text)
    except ValueError:
        bot.send_message(user_id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –∏–ª–∏ –¥—Ä–æ–±—å, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—É—é —Ç–æ—á–∫–æ–π", reply_markup=back_markup)
        return
    try:
        min_rub_amount = int(get_config_var('MinRubAmount'))
    except TypeError:
        min_rub_amount = 100
    min_btc_amount = round(convert_to_btc(min_rub_amount), 7)
    action, payment, address = db.get_state(user_id, ['Action', 'Payment', 'Address'])
    if action == 'buy':
        max_btc_amount, max_rub_amount = get_account_balance()
    else:
        max_rub_amount = payments_balances[payment]()
        max_btc_amount = round(convert_to_btc(max_rub_amount), 7)

    if min_btc_amount <= amount <= max_btc_amount:
        converted = convert_to_rub(amount)
        rub_amount = round(add_commission(converted, payment) if action == 'buy'
                           else sub_commission(converted, payment, address))
        btc_amount = amount
    elif min_rub_amount <= amount <= max_rub_amount:
        rub_amount = int(amount)
        btc_amount = round(sub_commission(convert_to_btc(amount), payment) if action == 'buy'
                           else convert_to_btc(add_commission(rub_amount, payment, address)), 7)
    else:
        bot.send_message(user_id,
                         set_amount_error_mes.format(min_btc_amount, max_btc_amount, min_rub_amount, max_rub_amount),
                         reply_markup=back_markup)
        return

    if action == 'buy':
        to_receive, to_pay = str(btc_amount) + ' BTC', str(rub_amount) + ' —Ä—É–±'
    else:
        to_receive, to_pay = str(rub_amount) + ' —Ä—É–±', str(btc_amount) + ' BTC'
    db.set_state(user_id, {'State': 'confirm', 'AmountRUB': rub_amount, 'AmountBTC': btc_amount})
    commission = get_config_var('Commission')
    if not commission:
        commission = 10
    bot.send_message(user_id, confirm_mes.format(to_receive, commission, to_pay,
                                                 reversed_payments[payment], address, round(convert_to_rub(1), 2)),
                     reply_markup=confirm_markup, parse_mode='Markdown')


@bot.message_handler(func=lambda message: 'confirm' in db.get_state(message.from_user.id))
def confirm(message):
    user_id = message.from_user.id
    text = message.text
    if text == "‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ":
        action, payment, rub, btc = db.get_state(user_id, ['Action', 'Payment', 'AmountRUB', 'AmountBTC'])

        if action == 'buy':
            comment = create_random_comment()
            pay_url = qiwi.create_form(own_qiwi_number, rub, comment)  # if payment == 'qiwi' else own_card_number
            markup = types.InlineKeyboardMarkup()
            if payment == 'yad':
                markup = wait_for_pay_markup
            else:
                markup.row(types.InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ', pay_url))
            if payment != 'card':
                text = f'–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ `{rub}` —Ä—É–±\n–Ω–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä: `{payments_numbers[payment]}` ' \
                       f'({reversed_payments[payment]})\n—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º `{comment}`\n‚ùóÔ∏è–í–∞–∂–Ω–æ: –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å ' \
                       f'–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É, –∏–Ω–∞—á–µ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –±—É–¥—É—Ç –∑–∞—Å—á–∏—Ç–∞–Ω—ã\n\n' \
                       f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –≤–∞–º –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {btc} BTC'
            else:
                text = f'–î–ª—è –æ–ø–ª–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–∞—Ä—Ç—ã –æ—Ç–∫—Ä–æ–π—Ç–µ [—Ñ–æ—Ä–º—É]({pay_url}) *–≤ –±—Ä–∞—É–∑–µ—Ä–µ* –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ' \
                       f'—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–æ—Å–æ–±.\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –≤–∞–º –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {btc} BTC'
            bot.send_message(user_id, text, reply_markup=markup, parse_mode='Markdown')

            if payment != 'yad':
                bot.send_message(user_id, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É', reply_markup=wait_for_pay_markup)
        else:
            address, comment = make_address()
            bot.send_message(user_id, f'–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ `{btc}` BTC\n–Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å: `{address}` (BTC)\n\n'
                                      f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –≤–∞–º –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {rub} —Ä—É–±',
                             reply_markup=wait_for_pay_markup, parse_mode='Markdown')

        db.set_state(user_id, {'State': 'paying|' + comment, 'Date': datetime.now()})
    elif text == 'TestAdminPrivileges':
        db.set_state(user_id, {'State': 'Admin_menu'})
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É":
        db.set_state(user_id, {'State': 'set_amount'})
        bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –≤ BTC –∏–ª–∏ —Ä—É–±–ª—è—Ö", reply_markup=back_markup)


@bot.message_handler(func=lambda message: 'paying' in db.get_state(message.from_user.id)[0])
def paying(message):
    user_id = message.from_user.id
    text = message.text
    if text == '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É':
        date, state, payment, action, rub, btc, address = db.get_state(user_id, ['Date', 'State', 'Payment', 'Action',
                                                                                 'AmountRUB', 'AmountBTC', 'Address'])
        if (datetime.now() - date).seconds // 3600 > 24:
            db.set_state(user_id, {'State': ''})
            bot.send_message(user_id,
                             '–í–∞—à–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é\n\n' + menu_message.format(*get_rates()),
                             reply_markup=menu_markup)
        else:
            comment = state.split('|')[1]
            admin_username = db.get_config_var('AdminUsername')
            if action == 'buy':
                confirmed = payments_checking[payment](comment, rub)
            else:
                confirmed = payments_checking['btc'](comment, btc)

            if confirmed:
                converted = round(convert_to_rub(btc))
                if action == 'buy':
                    tx_hash = send_btc(address, btc)
                    if tx_hash:
                        bot.send_message(user_id, f'–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è BTC –Ω–∞ —Å–≤–æ–π –∞–¥—Ä–µ—Å.')
                        db.new_transaction(user_id, rub, converted, datetime.now())
                        bot.send_message(admin_id, f'‚ùáÔ∏è –ù–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è ‚ùáÔ∏è\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} '
                                                   f'id:`{user_id}`\n–û–ø–ª–∞—á–µ–Ω–æ: {rub}\n–ü–æ–ª—É—á–µ–Ω–æ: {converted}')
                    else:
                        bot.send_message(user_id, f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞... –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ '
                                                  f'—Å–≤–æ–π –Ω–æ–º–µ—Ä\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ –∞–¥–º–∏–Ω—É {admin_username}')
                else:
                    if payment == 'yad':
                        sent = yandexmoney.send_money(address, rub)
                    else:
                        sent = qiwi.send_money(address, rub)

                    if sent:
                        bot.send_message(user_id, '–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.')
                        db.new_transaction(user_id, convert_to_rub(btc), rub, datetime.now())
                        bot.send_message(admin_id, f'‚ùáÔ∏è –ù–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è ‚ùáÔ∏è\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} '
                                                   f'id:`{user_id}`\n–û–ø–ª–∞—á–µ–Ω–æ: {converted}\n–ü–æ–ª—É—á–µ–Ω–æ: {rub}')
                    else:
                        bot.send_message(user_id, f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞... –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ '
                                                  f'—Å–≤–æ–π –Ω–æ–º–µ—Ä\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ –∞–¥–º–∏–Ω—É {admin_username}')
                start_handler(message)
            else:
                bot.send_message(user_id, f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç.\n–í —Å–ª—É—á–∞–µ '
                                          f'–Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–µ—É–¥–∞—á, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ –∞–¥–º–∏–Ω—É {admin_username}')
    elif text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é':
        db.set_state(user_id, {'State': ''})
        bot.send_message(user_id, menu_message.format(*get_rates()), reply_markup=menu_markup)


# ======================= Admin panel ================================


@bot.message_handler(func=lambda message: message.from_user.id == admin_id and
                     message.text in ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏', '/adm'])
def admin_command(message):
    user_id = message.from_user.id
    users_count = db.get_users_count()
    transactions_count = db.get_transactions_count()
    total_sum = db.get_total_sum()
    db.set_state(user_id, {'State': 'Admin_menu'})
    bot.send_message(user_id, admin_menu_text.format(users_count, transactions_count, total_sum),
                     reply_markup=admin_markup)


@bot.message_handler(func=lambda message: 'Admin_menu' in db.get_state(message.from_user.id) and
                                          message.text == '–ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤')
def transactions_list(message):
    user_id = message.from_user.id
    tx_list = db.get_transactions()
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton('‚û°Ô∏è', callback_data='tx_list 10'))
    bot.send_message(user_id, '–ü–æ–∫–∞–∑–∞–Ω–æ: 0 - 10\n\n' + '\n'.join([f'*[{tx[3]}]* /getUser{tx[0]} –û—Ç–¥–∞–Ω–æ: `{tx[1]}` '
                                                                  f'–ü–æ–ª—É—á–µ–Ω–æ: `{tx[2]}`' for tx in tx_list[0:10]]),
                     reply_markup=markup, parse_mode='Markdown')


@bot.callback_query_handler(func=lambda callback: 'tx_list' in callback.data)
def scroll_tx_list(callback):
    user_id = callback.from_user.id
    offset = int(callback.data.split(' ')[1])
    tx_list = db.get_transactions()
    markup = types.InlineKeyboardMarkup()
    if len(tx_list) - offset > 10:
        markup.add(types.InlineKeyboardButton('‚û°Ô∏è', callback_data=f'tx_list {offset + 10}'))
    if offset != 0:
        markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è', callback_data=f'tx_list {offset - 10}'))
    bot.edit_message_text(f'–ü–æ–∫–∞–∑–∞–Ω–æ: {offset} - {offset + 10}\n\n' + '\n'.join([f'*[{tx[3]}]* /getUser{tx[0]} –û—Ç–¥–∞–Ω–æ: '
                          f'`{tx[1]}` –ü–æ–ª—É—á–µ–Ω–æ: `{tx[2]}`' for tx in tx_list[offset:offset + 10]]), user_id,
                          callback.message.message_id, reply_markup=markup, parse_mode='Markdown')


@bot.message_handler(regexp=r'/getUser\d', func=lambda message: message.from_user.id == admin_id)
def get_user_handler(message):
    user_id = message.from_user.id
    search_id = int(message.text.replace('/getUser', ''))
    user_info = db.get_user_info(search_id)
    try:
        bot.send_message(user_id, f'*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\nId: `{user_info[0]}`\nUsername: @{user_info[1]}\n'
                                  f'–ö–æ–ª-–≤–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {user_info[2]}', parse_mode='Markdown')
    except TypeError:
        pass


@bot.message_handler(func=lambda message: 'Admin_menu' in db.get_state(message.from_user.id) and
                                          message.text == '–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–æ–≤')
def check_balances_handler(message):
    user_id = message.from_user.id
    qiwi_balance = payments_balances['qiwi']()
    text = '–ë–∞–ª–∞–Ω—Å—ã –≤–∞—à–∏—Ö —Å—á–µ—Ç–æ–≤:\nCoinbase: `{}` BTC | `{}` —Ä—É–±\nQiwi –∫–æ—à–µ–ª–µ–∫: `{}` —Ä—É–±\nYandexMoney: `{}` —Ä—É–±\n' \
           'Card: `{}` —Ä—É–±'.format(*get_account_balance(), qiwi_balance, payments_balances['yad'](), qiwi_balance)
    bot.send_message(user_id, text, parse_mode='Markdown')


@bot.message_handler(func=lambda message: 'Admin_menu' in db.get_state(message.from_user.id) and
                                          '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏' in message.text)
def admin_send_btc(message):
    user_id = message.from_user.id
    if 'BTC' in message.text:
        payment = 'btc'
    elif '–Ø–î' in message.text:
        payment = 'yad'
    else:
        payment = 'qiwi'
    db.set_state(user_id, {'State': 'Admin_send_address', 'Payment': payment})
    bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞', reply_markup=admin_back_markup)


@bot.message_handler(func=lambda message: 'Admin_send_address' in db.get_state(message.from_user.id))
def admin_send_address(message):
    user_id = message.from_user.id
    if payments_validations[db.get_state(message.from_user.id, ['Payment'])[0]](message.text):
        db.set_state(user_id, {'State': 'Admin_send', 'Address': message.text})
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–µ –º–µ–Ω–µ–µ 10 —Ä—É–±)', reply_markup=admin_back_markup)
    else:
        bot.send_message(user_id, '–¢–∞–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–ª–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É!')


@bot.message_handler(func=lambda message: 'Admin_send' in db.get_state(message.from_user.id))
def admin_send(message):
    user_id = message.from_user.id
    sub_str = 'BTC'
    try:
        amount = float(message.text)
    except ValueError:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –¥—Ä–æ–±—å, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—É—é —Ç–æ—á–∫–æ–π", reply_markup=admin_back_markup)
        return
    address, payment = db.get_state(user_id, ['Address', 'Payment'])
    if payment == 'btc':
        max_btc, max_rub = get_account_balance()
        if 10 < amount < max_rub:
            amount = convert_to_btc(amount)
        if amount > max_btc:
            bot.send_message(user_id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ', reply_markup=admin_back_markup)
            return
    else:
        max_rub = payments_balances[payment]()
        if 0 < amount < 10:
            amount = convert_to_rub(amount)
        amount = int(amount)
        if amount > max_rub:
            bot.send_message(user_id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ', reply_markup=admin_back_markup)
            return
        sub_str = '—Ä—É–±'
    amount_state = 'AmountRUB' if payment != 'btc' else 'AmountBTC'
    db.set_state(user_id, {'State': 'Admin_send_confirm', amount_state: amount})
    bot.send_message(user_id, f'–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ *{amount}* {sub_str} –Ω–∞ *{address}* ?', reply_markup=admin_confirm_markup,
                     parse_mode='Markdown')


@bot.message_handler(func=lambda message: 'Admin_send_confirm' in db.get_state(message.from_user.id))
def admin_send_confirm(message):
    user_id = message.from_user.id
    if message.text == '–î–∞, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏':
        address, payment, rub, btc = db.get_state(user_id, ['Address', 'Payment', 'AmountRUB', 'AmountBTC'])
        amount = rub if payment != 'btc' else btc
        if payment == 'btc':
            sent = send_btc(address, amount)
        elif payment == 'yad':
            sent = yandexmoney.send_money(address, amount)
        else:
            sent = qiwi.send_money(address, amount)
        text = '–î–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.'
        text += f'\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ https://www.blockchain.com/btc/tx/{sent}' if payment == 'btc' else ''
        if sent:
            bot.send_message(user_id, text, True)
        else:
            bot.send_message(user_id, '‚ùóÔ∏è–í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ‚ùóÔ∏è')
        admin_command(message)
    elif message.text == '–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å':
        admin_command(message)


@bot.message_handler(func=lambda message: 'Admin_menu' in db.get_state(message.from_user.id) and
                                          message.text == '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
def admin_settings_handler(message):
    user_id = message.from_user.id
    db.set_state(user_id, {'State': 'Admin_settings'})
    bot.send_message(user_id, admin_setting_mes, reply_markup=admin_setting_markup)


@bot.message_handler(func=lambda message: 'Admin_settings' in db.get_state(message.from_user.id))
def admin_settings(message):
    user_id = message.from_user.id
    if message.text == 'Yandex —Ç–æ–∫–µ–Ω':
        bot.send_message(user_id, f'–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ YM:\n\n1. –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞\n2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ '
                                  f'—Ñ–∞–π–ª deploy.py —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º -newYMToken. –ö–æ–º–∞–Ω–¥–∞: <code>python3.6 deploy.py '
                                  f'-newYMToken</code>\n3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: https://{ip}/auth_url –∏ '
                                  f'–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞\n\n–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—â–µ–Ω—ã –≤ –±–¥',
                         parse_mode='HTML')
        admin_settings_handler(message)
    else:
        try:
            name = setting_tokens[message.text]
            db.set_state(user_id, {'State': 'Admin_new_' + name})
            bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
        except KeyError:
            pass


@bot.message_handler(func=lambda message: 'Admin_new_' in db.get_state(message.from_user.id)[0])
def update_config(message):
    user_id = message.from_user.id
    name = db.get_state(user_id)[0].split('_')[2]
    db.insert_new_config_var(name, message.text)
    db.set_state(user_id, {'State': 'Admin_settings'})
    bot.send_message(user_id, '–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')


def args_check(args_names, checking_kwargs):
    for arg in args_names:
        if checking_kwargs.get(arg) is None:
            return False
    return True


def bot_start(use_webhook=False, webhook_data=None):
    if webhook_data is None:
        webhook_data = {}

    def set_webhook(url, cert):
        try:
            apihelper.set_webhook(bot_token, url=url, certificate=cert)
        except Exception as err:
            print(err.with_traceback(None))

    def webhook_isolated_run(url, cert):
        multiprocessing.Process(target=set_webhook, args=(url, cert), daemon=True).start()

    global bot

    telebot.logger.setLevel(logging.DEBUG)
    telebot.logger.addHandler(log.__file_handler('logs.log', log.__get_formater()))

    if not use_webhook:
        bot.remove_webhook()
        bot.polling(none_stop=True)

    elif args_check(['webhook_ip', 'webhook_port', 'token', 'ssl_cert'], webhook_data):
        bot.remove_webhook()
        time.sleep(1)

        webhook_isolated_run(url='https://%s:%s/%s/' % (webhook_data.get('webhook_ip'),
                                                        webhook_data.get('webhook_port'),
                                                        webhook_data.get('token')),
                             cert=open(webhook_data.get('ssl_cert'), 'r'))

        return bot
    else:
        raise Exception('Params for start with webhook is not specified')

    return bot
